import axios from 'axios';
import EventEmitter from 'event-emitter';
import qs from 'qs';
import { Base64 } from 'js-base64';
import URI from 'urijs';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var FileSortOptions = {
    NAME_ASC: 'NAME_ASC',
    NAME_DESC: 'NAME_DESC',
    SIZE_ASC: 'SIZE_ASC',
    SIZE_DESC: 'SIZE_DESC',
    DATE_ASC: 'DATE_ASC',
    DATE_DESC: 'DATE_DESC',
    MODIFIED_ASC: 'MODIFIED_ASC',
    MODIFIED_DESC: 'MODIFIED_DESC',
};

var PutioAPIClientEventTypes;
(function (PutioAPIClientEventTypes) {
    PutioAPIClientEventTypes["ERROR"] = "ERROR";
    PutioAPIClientEventTypes["CLIENT_IP_CHANGED"] = "CLIENT_IP_CHANGED";
})(PutioAPIClientEventTypes || (PutioAPIClientEventTypes = {}));

var IP_HEADER_KEY = 'putio-client-ip';
var createClientIPChangeEmitterMiddleware = function (client) {
    var IP = '';
    var checkIP = function (response) {
        var newIP = response.headers[IP_HEADER_KEY];
        if (!IP) {
            IP = newIP;
            return;
        }
        if (newIP && IP !== newIP) {
            client.emit(PutioAPIClientEventTypes.CLIENT_IP_CHANGED, { IP: IP, newIP: newIP });
            IP = newIP;
            return;
        }
    };
    return {
        onFulfilled: function (response) {
            checkIP(response);
            return response;
        },
        onRejected: function (error) {
            if (error.response) {
                checkIP(error.response);
            }
            return Promise.reject(error);
        },
    };
};

var identity = function (arg) { return arg; };
var isPutioAPIErrorResponse = function (input) {
    return typeof input === 'object' && Object.keys(input).includes('error_type');
};
var isPutioAPIError = function (input) {
    return typeof input === 'object' &&
        !!input.data &&
        isPutioAPIErrorResponse(input.data);
};

var createErrorEmitterMiddleware = function (client) { return ({
    onFulfilled: identity,
    onRejected: function (error) {
        client.emit(PutioAPIClientEventTypes.ERROR, error);
        return Promise.reject(error);
    },
}); };

var createResponseFormatterMiddleware = function () { return ({
    onFulfilled: function (response) { return (__assign(__assign({}, response), { body: response.data })); },
    onRejected: function (error) {
        var errorData = {};
        if (error.response && error.response.data) {
            var _a = error.response, status_1 = _a.status, data = _a.data;
            errorData = isPutioAPIErrorResponse(data)
                ? __assign(__assign({}, data), { status_code: status_1 }) : {
                error_message: error.message,
                error_type: 'ERROR',
                status_code: status_1,
            };
        }
        else {
            errorData = {
                error_message: error.message,
                error_type: 'ERROR',
                status_code: 0,
            };
        }
        var formattedError = __assign(__assign({}, error), { data: errorData, toJSON: function () { return errorData; } });
        return Promise.reject(formattedError);
    },
}); };

var Auth = /** @class */ (function () {
    function Auth(client) {
        this.client = client;
    }
    Auth.prototype.GetLoginURL = function (_a) {
        var redirectURI = _a.redirectURI, _b = _a.responseType, responseType = _b === void 0 ? 'token' : _b, state = _a.state, clientID = _a.clientID, clientName = _a.clientName;
        var url = new URI(this.client.options.webAppURL + "/authenticate").query({
            client_id: clientID || this.client.options.clientID,
            client_name: clientName,
            redirect_uri: redirectURI,
            response_type: responseType,
            state: state,
        });
        return url.toString();
    };
    Auth.prototype.Login = function (_a) {
        var username = _a.username, password = _a.password, app = _a.app;
        return this.client.put("/oauth2/authorizations/clients/" + app.client_id + "?client_secret=" + app.client_secret, {
            headers: {
                Authorization: "Basic " + Base64.encode(username + ":" + password),
            },
        });
    };
    Auth.prototype.Logout = function () {
        return this.client.post('/oauth/grants/logout');
    };
    Auth.prototype.Register = function (data) {
        return this.client.post('/registration/register', {
            data: __assign({ client_id: this.client.options.clientID }, data),
        });
    };
    Auth.prototype.Exists = function (key, value) {
        return this.client.get("/registration/exists/" + key, {
            params: { value: value },
        });
    };
    Auth.prototype.GetVoucher = function (code) {
        return this.client.get("/registration/voucher/" + code);
    };
    Auth.prototype.GetGiftCard = function (code) {
        return this.client.get("/registration/gift_card/" + code);
    };
    Auth.prototype.GetFamilyInvite = function (code) {
        return this.client.get("/registration/family/" + code);
    };
    Auth.prototype.ForgotPassword = function (mail) {
        return this.client.post('/registration/password/forgot', {
            data: { mail: mail },
        });
    };
    Auth.prototype.ResetPassword = function (key, newPassword) {
        return this.client.post('/registration/password/reset', {
            data: {
                key: key,
                password: newPassword,
            },
        });
    };
    Auth.prototype.GetCode = function (clientID, clientName) {
        var url = "/oauth2/oob/code?app_id=" + clientID;
        if (clientName) {
            url = url + "&client_name=" + clientName;
        }
        return this.client.get(url);
    };
    Auth.prototype.CheckCodeMatch = function (code) {
        return this.client.get("/oauth2/oob/code/" + code);
    };
    Auth.prototype.LinkDevice = function (code) {
        return this.client.post('/oauth2/oob/code', {
            data: { code: code },
        });
    };
    Auth.prototype.Grants = function () {
        return this.client.get('/oauth/grants/');
    };
    Auth.prototype.RevokeApp = function (id) {
        return this.client.post("/oauth/grants/" + id + "/delete");
    };
    Auth.prototype.Clients = function () {
        return this.client.get('/oauth/clients/');
    };
    Auth.prototype.RevokeClient = function (id) {
        return this.client.post("/oauth/clients/" + id + "/delete");
    };
    Auth.prototype.RevokeAllClients = function () {
        return this.client.post('/oauth/clients/delete-all');
    };
    Auth.prototype.ValidateToken = function () {
        return this.client.get('/oauth2/validate');
    };
    return Auth;
}());

var Config = /** @class */ (function () {
    function Config(client) {
        this.client = client;
    }
    Config.prototype.Read = function () {
        return this.client.get('/config');
    };
    Config.prototype.Write = function (config) {
        return this.client.put('/config', {
            data: { config: config },
        });
    };
    Config.prototype.GetKey = function (key) {
        return this.client.get("/config/" + key);
    };
    Config.prototype.SetKey = function (key, value) {
        return this.client.put("/config/" + key, {
            data: { value: value },
        });
    };
    Config.prototype.DeleteKey = function (key) {
        return this.client.delete("/config/" + key);
    };
    return Config;
}());

var PutioEvents = /** @class */ (function () {
    function PutioEvents(client) {
        this.client = client;
    }
    PutioEvents.prototype.Query = function () {
        return this.client.get('/events/list');
    };
    PutioEvents.prototype.Delete = function (id) {
        return this.client.post("/events/delete/" + id);
    };
    PutioEvents.prototype.Clear = function () {
        return this.client.post('/events/delete');
    };
    return PutioEvents;
}());

var Family = /** @class */ (function () {
    function Family(client) {
        this.client = client;
    }
    Family.prototype.GetInvites = function () {
        return this.client.get('/account/family_invites');
    };
    Family.prototype.CreateInvite = function () {
        return this.client.post('/account/sub_account');
    };
    Family.prototype.DeleteMember = function (username) {
        return this.client.delete("/account/sub_account/" + username);
    };
    Family.prototype.Join = function (invitationCode) {
        return this.client.post("/account/join_family/" + invitationCode);
    };
    return Family;
}());

var File = /** @class */ (function () {
    function File(client) {
        this.client = client;
    }
    File.prototype.Public = function (oauthToken, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.mp4StatusParent, mp4StatusParent = _c === void 0 ? 1 : _c, _d = _b.videoMetadataParent, videoMetadataParent = _d === void 0 ? 1 : _d, _e = _b.codecsParent, codecsParent = _e === void 0 ? 1 : _e, _f = _b.mediaInfoParent, mediaInfoParent = _f === void 0 ? 1 : _f;
        return this.client.get('/files/public', {
            params: {
                codecs_parent: codecsParent,
                media_info_parent: mediaInfoParent,
                mp4_status_parent: mp4StatusParent,
                mp4_stream_url_parent: 1,
                oauth_token: oauthToken,
                stream_url_parent: 1,
                video_metadata_parent: videoMetadataParent,
            },
        });
    };
    File.prototype.Download = function (fileId) {
        return this.client.get("/files/" + fileId + "/download");
    };
    File.prototype.GetStorageURL = function (fileId) {
        return this.client.get("/files/" + fileId + "/url");
    };
    File.prototype.GetContent = function (fileId) {
        return this.client.get("/files/" + fileId + "/stream");
    };
    File.prototype.Subtitles = function (fileId, oauthToken, languages) {
        return this.client.get("/files/" + fileId + "/subtitles", {
            params: {
                languages: languages,
                oauth_token: oauthToken,
            },
        });
    };
    File.prototype.GetHLSStreamURL = function (fileId, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.token, token = _c === void 0 ? '' : _c, _d = _b.subtitleLanguages, subtitleLanguages = _d === void 0 ? [] : _d, _e = _b.maxSubtitleCount, maxSubtitleCount = _e === void 0 ? -1 : _e, _f = _b.playOriginal, playOriginal = _f === void 0 ? false : _f;
        return new URI(this.client.options.baseURL + "/files/" + fileId + "/hls/media.m3u8")
            .query({
            oauth_token: token || this.client.token,
            subtitle_languages: subtitleLanguages,
            max_subtitle_count: maxSubtitleCount,
            original: playOriginal ? 1 : 0,
        })
            .toString();
    };
    File.prototype.ConvertToMp4 = function (fileId) {
        return this.client.post("/files/" + fileId + "/mp4");
    };
    File.prototype.ConvertStatus = function (fileId) {
        return this.client.get("/files/" + fileId + "/mp4");
    };
    File.prototype.DeleteMp4 = function (fileId) {
        return this.client.delete("/files/" + fileId + "/mp4");
    };
    File.prototype.SharedWith = function (fileId) {
        return this.client.get("/files/" + fileId + "/shared-with");
    };
    File.prototype.Unshare = function (fileId, shareId) {
        var shares = shareId;
        if (shares) {
            shares = Array.isArray(shares)
                ? shares.map(function (i) { return i.toString(); })
                : [shares.toString()];
            shares = shares.join(',');
        }
        return this.client.post("/files/" + fileId + "/unshare", {
            data: {
                shares: shares || 'everyone',
            },
        });
    };
    File.prototype.SaveAsMp4 = function (fileId) {
        return this.client.get("/files/" + fileId + "/put-mp4-to-my-folders");
    };
    File.prototype.Rename = function (fileId, name) {
        return this.client.post('/files/rename', {
            data: {
                file_id: fileId,
                name: name,
            },
        });
    };
    File.prototype.GetStartFrom = function (fileId) {
        return this.client.get("/files/" + fileId + "/start-from");
    };
    File.prototype.SetStartFrom = function (fileId, time) {
        return this.client.post("/files/" + fileId + "/start-from/set", {
            data: {
                time: parseInt(time, 10),
            },
        });
    };
    File.prototype.ResetStartFrom = function (fileId) {
        return this.client.get("/files/" + fileId + "/start-from/delete");
    };
    File.prototype.Extract = function (fileId, password) {
        return this.client.post('/files/extract', {
            data: {
                password: password,
                user_file_ids: [fileId.toString()],
            },
        });
    };
    File.prototype.CreatePublicLink = function (fileId) {
        return this.client.post("/files/" + fileId + "/share_public");
    };
    File.prototype.RevokePublicLink = function (id) {
        return this.client.delete("/files/public/list/" + id);
    };
    File.prototype.FindNextFile = function (fileId, fileType) {
        return this.client.get("/files/" + fileId + "/next-file", {
            params: { file_type: fileType },
        });
    };
    File.prototype.FindNextVideo = function (fileId) {
        return this.client.get("/files/" + fileId + "/next-video");
    };
    return File;
}());

var Files = /** @class */ (function () {
    function Files(client) {
        this.client = client;
    }
    Files.prototype.Query = function (id, _a) {
        var _b = _a === void 0 ? {} : _a, perPage = _b.perPage, sortBy = _b.sortBy, contentType = _b.contentType, fileType = _b.fileType, streamUrl = _b.streamUrl, streamUrlParent = _b.streamUrlParent, mp4StreamUrl = _b.mp4StreamUrl, mp4StreamUrlParent = _b.mp4StreamUrlParent, hidden = _b.hidden, mp4Status = _b.mp4Status, mp4StatusParent = _b.mp4StatusParent, videoMetadata = _b.videoMetadata, videoMetadataParent = _b.videoMetadataParent, codecsParent = _b.codecsParent, mediaInfoParent = _b.mediaInfoParent, breadcrumbs = _b.breadcrumbs, total = _b.total;
        return this.client.get("/files/" + (id === 'friends' ? 'items-shared-with-you' : 'list'), {
            params: {
                parent_id: id !== 'friends' ? id : null,
                per_page: perPage,
                sort_by: sortBy,
                content_type: contentType,
                file_type: fileType,
                stream_url: streamUrl,
                stream_url_parent: streamUrlParent,
                mp4_stream_url: mp4StreamUrl,
                mp4_stream_url_parent: mp4StreamUrlParent,
                hidden: hidden,
                mp4_status: mp4Status,
                mp4_status_parent: mp4StatusParent,
                video_metadata: videoMetadata,
                video_metadata_parent: videoMetadataParent,
                codecs_parent: codecsParent,
                media_info_parent: mediaInfoParent,
                breadcrumbs: breadcrumbs,
                total: total,
            },
        });
    };
    Files.prototype.Continue = function (cursor, _a) {
        var perPage = (_a === void 0 ? {} : _a).perPage;
        return this.client.post('/files/list/continue', {
            data: {
                cursor: cursor,
                per_page: perPage,
            },
        });
    };
    Files.prototype.Search = function (query, _a) {
        var _b = _a === void 0 ? { perPage: 50 } : _a, perPage = _b.perPage, fileType = _b.fileType;
        return this.client.get('/files/search', {
            params: {
                query: query,
                per_page: perPage,
                type: fileType,
            },
        });
    };
    Files.prototype.ContinueSearch = function (cursor, _a) {
        var perPage = (_a === void 0 ? {} : _a).perPage;
        return this.client.post('/files/search/continue', {
            data: {
                cursor: cursor,
                per_page: perPage,
            },
        });
    };
    Files.prototype.NewFolder = function (name, parentId) {
        if (parentId === void 0) { parentId = 0; }
        return this.CreateFolder({ name: name, parentId: parentId });
    };
    Files.prototype.CreateFolder = function (_a) {
        var name = _a.name, parentId = _a.parentId, path = _a.path;
        return this.client.post('/files/create-folder', {
            data: {
                name: name,
                parent_id: parentId,
                path: path,
            },
        });
    };
    Files.prototype.DeleteAll = function (cursor, excludeIds) {
        if (excludeIds === void 0) { excludeIds = []; }
        return this.client.post('/files/delete', {
            data: {
                cursor: cursor,
                exclude_ids: excludeIds.join(','),
            },
            params: {
                skip_nonexistents: true,
            },
        });
    };
    Files.prototype.Delete = function (ids, _a) {
        if (ids === void 0) { ids = []; }
        var _b = (_a === void 0 ? {} : _a).ignoreFileOwner, ignoreFileOwner = _b === void 0 ? false : _b;
        return this.client.post('/files/delete', {
            data: {
                file_ids: ids.join(','),
            },
            params: {
                skip_nonexistents: true,
                skip_owner_check: ignoreFileOwner,
            },
        });
    };
    Files.prototype.Extract = function (_a) {
        var _b = _a.ids, ids = _b === void 0 ? [] : _b, cursor = _a.cursor, _c = _a.excludeIds, excludeIds = _c === void 0 ? [] : _c;
        return this.client.post('/files/extract', {
            data: {
                user_file_ids: ids.join(','),
                exclude_ids: excludeIds.join(','),
                cursor: cursor,
            },
        });
    };
    Files.prototype.ExtractStatus = function () {
        return this.client.get('/files/extract');
    };
    Files.prototype.Share = function (_a) {
        var _b = _a.ids, ids = _b === void 0 ? [] : _b, cursor = _a.cursor, _c = _a.excludeIds, excludeIds = _c === void 0 ? [] : _c, friends = _a.friends;
        return this.client.post('/files/share', {
            data: {
                cursor: cursor,
                friends: friends,
                file_ids: ids.join(','),
                exclude_ids: excludeIds.join(','),
            },
        });
    };
    Files.prototype.Move = function (ids, to) {
        return this.client.post('/files/move', {
            data: {
                file_ids: ids.join(','),
                parent_id: to,
            },
        });
    };
    Files.prototype.MoveAll = function (_a) {
        var cursor = _a.cursor, _b = _a.excludeIds, excludeIds = _b === void 0 ? [] : _b, to = _a.to;
        return this.client.post('/files/move', {
            data: {
                cursor: cursor,
                parent_id: to,
                exclude_ids: excludeIds.join(','),
            },
        });
    };
    Files.prototype.Copy = function (ids, to) {
        if (to === void 0) { to = 0; }
        return this.client.post('/files/copy-to-disk', {
            data: {
                file_ids: ids.join(','),
                parent_id: to,
            },
        });
    };
    Files.prototype.DownloadLinks = function (_a) {
        var _b = _a.ids, ids = _b === void 0 ? [] : _b, cursor = _a.cursor, _c = _a.excludeIds, excludeIds = _c === void 0 ? [] : _c;
        return this.client.post('/files/get-download-links', {
            data: {
                file_ids: ids.join(','),
                exclude_ids: excludeIds.join(','),
                cursor: cursor,
            },
        });
    };
    Files.prototype.ConvertToMp4 = function (_a) {
        var _b = _a.ids, ids = _b === void 0 ? [] : _b, cursor = _a.cursor, _c = _a.excludeIds, excludeIds = _c === void 0 ? [] : _c;
        return this.client.post('/files/convert_mp4', {
            data: {
                file_ids: ids.join(','),
                exclude_ids: excludeIds.join(','),
                cursor: cursor,
            },
        });
    };
    Files.prototype.SharedOnes = function () {
        return this.client.get('/files/shared');
    };
    Files.prototype.PublicShares = function () {
        return this.client.get('/files/public/list');
    };
    Files.prototype.SetWatchStatus = function (_a) {
        var _b = _a.ids, ids = _b === void 0 ? [] : _b, cursor = _a.cursor, _c = _a.excludeIds, excludeIds = _c === void 0 ? [] : _c, watched = _a.watched;
        return this.client.post('/files/watch-status', {
            data: {
                file_ids: ids.join(','),
                exclude_ids: excludeIds.join(','),
                cursor: cursor,
                watched: watched,
            },
        });
    };
    return Files;
}());

var FriendInvites = /** @class */ (function () {
    function FriendInvites(client) {
        this.client = client;
    }
    FriendInvites.prototype.GetAll = function () {
        return this.client.get('/account/friend_invites');
    };
    FriendInvites.prototype.Create = function () {
        return this.client.post('/account/create_friend_invitation');
    };
    return FriendInvites;
}());

var Friends = /** @class */ (function () {
    function Friends(client) {
        this.client = client;
    }
    Friends.prototype.Query = function () {
        return this.client.get('/friends/list');
    };
    Friends.prototype.Search = function (username) {
        return this.client.get("/friends/user-search/" + username);
    };
    Friends.prototype.WaitingRequests = function () {
        return this.client.get('/friends/waiting-requests');
    };
    Friends.prototype.WaitingRequestsCount = function () {
        return this.client.get('/friends/waiting-requests-count');
    };
    Friends.prototype.SendFrienshipRequest = function (username) {
        return this.client.post("/friends/" + username + "/request");
    };
    Friends.prototype.Remove = function (username) {
        return this.client.post("/friends/" + username + "/unfriend");
    };
    Friends.prototype.Approve = function (username) {
        return this.client.post("/friends/" + username + "/approve");
    };
    Friends.prototype.Deny = function (username) {
        return this.client.post("/friends/" + username + "/deny");
    };
    Friends.prototype.SharedFolder = function (username) {
        return this.client.get("/friends/" + username + "/files");
    };
    return Friends;
}());

var IFTTT = /** @class */ (function () {
    function IFTTT(client) {
        this.client = client;
    }
    IFTTT.prototype.SendEvent = function (_a) {
        var clientName = _a.clientName, eventType = _a.eventType, _b = _a.ingredients, ingredients = _b === void 0 ? {} : _b;
        return this.client.post('/ifttt-client/event', {
            data: {
                client_name: clientName,
                event_type: eventType,
                ingredients: ingredients,
            },
        });
    };
    return IFTTT;
}());

var OAuth = /** @class */ (function () {
    function OAuth(client) {
        this.client = client;
    }
    OAuth.prototype.GetAuthorizeURL = function (query) {
        if (query === void 0) { query = {}; }
        var _a = this.client, token = _a.token, baseURL = _a.options.baseURL;
        var uri = new URI(baseURL + "/oauth2/authorize").query(__assign(__assign({}, query), { oauth_token: token }));
        return uri.toString();
    };
    OAuth.prototype.Query = function () {
        return this.client.get('/oauth/apps');
    };
    OAuth.prototype.Get = function (id) {
        return this.client.get("/oauth/apps/" + id);
    };
    OAuth.prototype.GetIconURL = function (id) {
        var _a = this.client, token = _a.token, baseURL = _a.options.baseURL;
        return baseURL + "/oauth/apps/" + id + "/icon?oauth_token=" + token;
    };
    OAuth.prototype.SetIcon = function (id, data) {
        return this.client.post("/oauth/apps/" + id + "/icon", { data: data });
    };
    OAuth.prototype.Create = function (data) {
        return this.client.post('/oauth/apps/register', { data: data });
    };
    OAuth.prototype.Update = function (id, data) {
        return this.client.post("/oauth/apps/" + id, { data: data });
    };
    OAuth.prototype.Delete = function (id) {
        return this.client.post("/oauth/apps/" + id + "/delete");
    };
    OAuth.prototype.RegenerateToken = function (id) {
        return this.client.post("/oauth/apps/" + id + "/regenerate_token");
    };
    OAuth.prototype.GetPopularApps = function () {
        return this.client.get('/oauth/apps/popular');
    };
    return OAuth;
}());

var Payment = /** @class */ (function () {
    function Payment(client) {
        this.client = client;
    }
    Payment.prototype.Info = function () {
        return this.client.get('/payment/info');
    };
    Payment.prototype.Plans = function () {
        return this.client.get('/payment/plans');
    };
    Payment.prototype.History = function (_a) {
        var _b = (_a === void 0 ? {} : _a).unReportedOnly, unReportedOnly = _b === void 0 ? false : _b;
        return this.client.get('/payment/history', {
            params: {
                unreported_only: unReportedOnly,
            },
        });
    };
    Payment.prototype.Invites = function () {
        return this.client.get('/payment/invites');
    };
    Payment.prototype.GetPlanChangeInfo = function (_a) {
        var planPath = _a.planPath, paymentType = _a.paymentType, couponCode = _a.couponCode;
        return this.client.get("/payment/change_plan/" + planPath, {
            params: {
                coupon_code: couponCode,
                payment_type: paymentType,
            },
        });
    };
    Payment.prototype.GetPlanChangeUrls = function (_a) {
        var planPath = _a.planPath, paymentType = _a.paymentType, couponCode = _a.couponCode;
        return this.client.post("/payment/change_plan/" + planPath, {
            data: {
                payment_type: paymentType,
            },
            params: {
                coupon_code: couponCode,
            },
        });
    };
    Payment.prototype.ChangePlan = function (args) {
        return this.GetPlanChangeUrls(args);
    };
    Payment.prototype.CreateCoinbaseCharge = function (path) {
        return this.client.post('/payment/methods/coinbase/charge', {
            data: {
                plan_fs_path: path,
            },
        });
    };
    Payment.prototype.CreateCoinbaseCheckout = function (path) {
        return this.client.post('/payment/methods/coinbase/checkout', {
            data: {
                plan_fs_path: path,
            },
        });
    };
    Payment.prototype.CancelSubscription = function () {
        return this.client.post('/payment/stop_subscription');
    };
    Payment.prototype.GetVoucherInfo = function (code) {
        return this.client.get("/payment/redeem_voucher/" + code);
    };
    Payment.prototype.RedeemVoucher = function (code) {
        return this.client.post("/payment/redeem_voucher/" + code);
    };
    Payment.prototype.VerifyFastspringPayment = function (reference) {
        return this.client.get("/payment/fs-confirm/" + reference);
    };
    Payment.prototype.Report = function (paymentIds) {
        if (paymentIds === void 0) { paymentIds = []; }
        return this.client.post('/payment/report', {
            data: {
                payment_ids: paymentIds.join(','),
            },
        });
    };
    Payment.prototype.AddWaitingPayment = function (data) {
        return this.client.post('/payment/paddle_waiting_payment', { data: data });
    };
    return Payment;
}());

var RSS = /** @class */ (function () {
    function RSS(client) {
        this.client = client;
    }
    RSS.prototype.Query = function () {
        return this.client.get('/rss/list');
    };
    RSS.prototype.Get = function (id) {
        return this.client.get("/rss/" + id);
    };
    RSS.prototype.Create = function (rss) {
        return this.client.post('/rss/create', {
            data: rss,
        });
    };
    RSS.prototype.Update = function (id, rss) {
        return this.client.post("/rss/" + id, {
            data: rss,
        });
    };
    RSS.prototype.Pause = function (id) {
        return this.client.post("/rss/" + id + "/pause");
    };
    RSS.prototype.Resume = function (id) {
        return this.client.post("/rss/" + id + "/resume");
    };
    RSS.prototype.Delete = function (id) {
        return this.client.post("/rss/" + id + "/delete");
    };
    RSS.prototype.Logs = function (id) {
        return this.client.get("/rss/" + id + "/items");
    };
    RSS.prototype.ClearLogs = function (id) {
        return this.client.post("/rss/" + id + "/clear-log");
    };
    RSS.prototype.RetryItem = function (id, itemId) {
        return this.client.post("/rss/" + id + "/items/" + itemId + "/retry");
    };
    return RSS;
}());

var Tranfers = /** @class */ (function () {
    function Tranfers(client) {
        this.client = client;
    }
    Tranfers.prototype.Add = function (_a) {
        var url = _a.url, saveTo = _a.saveTo, callbackUrl = _a.callbackUrl;
        return this.client.post('/transfers/add', {
            data: {
                callback_url: callbackUrl,
                save_parent_id: saveTo,
                url: url,
            },
        });
    };
    Tranfers.prototype.Get = function (id) {
        return this.client.get("/transfers/" + id);
    };
    Tranfers.prototype.Query = function () {
        return this.client.get('/transfers/list');
    };
    Tranfers.prototype.ClearAll = function () {
        return this.client.post('/transfers/clean');
    };
    Tranfers.prototype.Cancel = function (ids) {
        if (ids === void 0) { ids = []; }
        return this.client.post('/transfers/cancel', {
            data: {
                transfer_ids: ids.join(','),
            },
        });
    };
    Tranfers.prototype.Analysis = function (links) {
        if (links === void 0) { links = []; }
        return this.client.post('/transfers/info', {
            data: {
                urls: links.join('\n'),
            },
        });
    };
    Tranfers.prototype.StartFetching = function (magnets) {
        return this.client.post('/transfers/add-multi', {
            data: {
                urls: JSON.stringify(magnets),
            },
        });
    };
    Tranfers.prototype.Retry = function (id) {
        return this.client.post('/transfers/retry', {
            data: { id: id },
        });
    };
    Tranfers.prototype.Reannounce = function (id) {
        return this.client.post('/transfers/reannounce', {
            data: { id: id },
        });
    };
    Tranfers.prototype.Count = function () {
        return this.client.get('/transfers/count');
    };
    Tranfers.prototype.CreateTorrent = function (_a) {
        var cursor = _a.cursor, _b = _a.excludeIds, excludeIds = _b === void 0 ? [] : _b, _c = _a.name, name = _c === void 0 ? '' : _c, _d = _a.trackers, trackers = _d === void 0 ? '' : _d, _e = _a.isPrivate, isPrivate = _e === void 0 ? false : _e, _f = _a.ids, ids = _f === void 0 ? [] : _f;
        return this.client.post('/transfers/create-torrent', {
            data: {
                cursor: cursor,
                excludeIds: excludeIds.join(','),
                file_ids: ids.join(','),
                is_private: isPrivate,
                name: name,
                trackers: trackers,
            },
        });
    };
    return Tranfers;
}());

var Trash = /** @class */ (function () {
    function Trash(client) {
        this.client = client;
    }
    Trash.prototype.List = function (_a) {
        var _b = (_a === void 0 ? {} : _a).limit, limit = _b === void 0 ? 50 : _b;
        return this.client.get('/trash/list', {
            params: {
                per_page: limit,
            },
        });
    };
    Trash.prototype.Continue = function (cursor, _a) {
        var _b = (_a === void 0 ? {} : _a).limit, limit = _b === void 0 ? 50 : _b;
        return this.client.post('/trash/list/continue', {
            data: {
                cursor: cursor,
                per_page: limit,
            },
        });
    };
    Trash.prototype.Restore = function (_a) {
        var _b = _a.useCursor, useCursor = _b === void 0 ? false : _b, _c = _a.ids, ids = _c === void 0 ? [] : _c, cursor = _a.cursor;
        return this.client.post('/trash/restore', {
            data: {
                cursor: useCursor ? cursor : undefined,
                file_ids: !useCursor ? ids.join(',') : undefined,
            },
        });
    };
    Trash.prototype.Delete = function (_a) {
        var _b = _a.useCursor, useCursor = _b === void 0 ? false : _b, _c = _a.ids, ids = _c === void 0 ? [] : _c, cursor = _a.cursor;
        return this.client.post('/trash/delete', {
            data: {
                cursor: useCursor ? cursor : undefined,
                file_ids: !useCursor ? ids.join(',') : undefined,
            },
        });
    };
    Trash.prototype.Empty = function () {
        return this.client.post('/trash/empty');
    };
    return Trash;
}());

var Tunnel = /** @class */ (function () {
    function Tunnel(client) {
        this.client = client;
    }
    Tunnel.prototype.Routes = function () {
        return this.client.get('/tunnel/routes');
    };
    return Tunnel;
}());

var User = /** @class */ (function () {
    function User(client) {
        this.client = client;
    }
    User.prototype.Info = function (params) {
        return this.client.get('/account/info', {
            params: params,
        });
    };
    User.prototype.Settings = function () {
        return this.client.get('/account/settings');
    };
    User.prototype.SaveSettings = function (settings) {
        return this.client.post('/account/settings', {
            data: settings,
        });
    };
    User.prototype.Config = function () {
        return this.client.get('/config');
    };
    User.prototype.SaveConfig = function (config) {
        return this.client.put('/config', {
            data: { config: config },
        });
    };
    User.prototype.ClearData = function (data) {
        if (data === void 0) { data = {}; }
        return this.client.post('/account/clear', {
            data: data,
        });
    };
    User.prototype.Destroy = function (currentPassword) {
        return this.client.post('/account/destroy', {
            data: {
                current_password: currentPassword,
            },
        });
    };
    return User;
}());

var Zips = /** @class */ (function () {
    function Zips(client) {
        this.client = client;
    }
    Zips.prototype.Query = function () {
        return this.client.get('/zips/list');
    };
    Zips.prototype.Create = function (_a) {
        var cursor = _a.cursor, _b = _a.excludeIds, excludeIds = _b === void 0 ? [] : _b, _c = _a.ids, ids = _c === void 0 ? [] : _c;
        return this.client.post('/zips/create', {
            data: {
                cursor: cursor,
                exclude_ids: excludeIds.join(','),
                file_ids: ids.join(','),
            },
        });
    };
    Zips.prototype.Get = function (id) {
        return this.client.get("/zips/" + id);
    };
    Zips.prototype.Retry = function (id) {
        return this.client.get("/zips/" + id + "/retry");
    };
    Zips.prototype.Cancel = function (id) {
        return this.client.get("/zips/" + id + "/cancel");
    };
    return Zips;
}());

var PutioAPIClient = /** @class */ (function () {
    function PutioAPIClient(options) {
        EventEmitter(this);
        this.options = __assign(__assign({}, PutioAPIClient.DEFAULT_OPTIONS), options);
        this.http = this.createHTTPClient();
        this.Auth = new Auth(this);
        this.Config = new Config(this);
        this.Events = new PutioEvents(this);
        this.Files = new Files(this);
        this.File = new File(this);
        this.Friends = new Friends(this);
        this.FriendInvites = new FriendInvites(this);
        this.Family = new Family(this);
        this.OAuth = new OAuth(this);
        this.Payment = new Payment(this);
        this.RSS = new RSS(this);
        this.Transfers = new Tranfers(this);
        this.Trash = new Trash(this);
        this.Tunnel = new Tunnel(this);
        this.User = new User(this);
        this.Zips = new Zips(this);
        this.IFTTT = new IFTTT(this);
    }
    PutioAPIClient.prototype.setToken = function (token) {
        this.token = token;
        this.http.defaults.headers.common.Authorization = "token " + token;
        return this;
    };
    PutioAPIClient.prototype.get = function (url, config) {
        return this.http(__assign({ method: 'GET', url: url }, config));
    };
    PutioAPIClient.prototype.post = function (url, config) {
        return this.http(__assign({ method: 'POST', url: url }, config));
    };
    PutioAPIClient.prototype.put = function (url, config) {
        return this.http(__assign({ method: 'PUT', url: url }, config));
    };
    PutioAPIClient.prototype.delete = function (url, config) {
        return this.http(__assign({ method: 'DELETE', url: url }, config));
    };
    PutioAPIClient.prototype.createHTTPClient = function () {
        var _this = this;
        var axiosInstance = axios.create({
            baseURL: this.options.baseURL,
            withCredentials: true,
            timeout: 30000,
            paramsSerializer: function (params) {
                return qs.stringify(params, { arrayFormat: 'comma' });
            },
        });
        var middlewareFactories = [
            createResponseFormatterMiddleware,
            createClientIPChangeEmitterMiddleware,
            createErrorEmitterMiddleware,
        ];
        var middlewares = middlewareFactories.map(function (createMiddleware) { return createMiddleware(_this); });
        middlewares.forEach(function (middleware) {
            axiosInstance.interceptors.response.use(middleware.onFulfilled, middleware.onRejected);
        });
        return axiosInstance;
    };
    PutioAPIClient.EVENTS = PutioAPIClientEventTypes;
    PutioAPIClient.DEFAULT_OPTIONS = {
        baseURL: 'https://api.put.io/v2',
        clientID: 1,
        webAppURL: 'https://app.put.io',
    };
    return PutioAPIClient;
}());

var MockPutioAPIClient = /** @class */ (function (_super) {
    __extends(MockPutioAPIClient, _super);
    function MockPutioAPIClient() {
        var _this = _super.call(this, {}) || this;
        _this.emit = jest.fn();
        return _this;
    }
    return MockPutioAPIClient;
}(PutioAPIClient));
var mockPutioAPIClientResponse = {
    config: {},
    data: { foo: 'bar', status: 'OK' },
    headers: {},
    status: 200,
    statusText: 'ok',
};
var mockAxiosError = {
    config: {},
    isAxiosError: true,
    name: 'AXIOS_ERROR',
    message: 'AXIOS_ERROR_MESSAGE',
    toJSON: function () {
        return {
            name: this.name,
            message: this.message,
        };
    },
};
var mockPutioAPIClientError = __assign(__assign({}, mockAxiosError), { data: {
        error_type: 'MOCK_ERROR',
        error_message: 'MOCK_MESSAGE',
        status_code: 0,
    }, toJSON: function () {
        return this.data;
    } });
var createMockResponse = function (data, status) {
    if (status === void 0) { status = 200; }
    return ({
        config: {},
        data: __assign(__assign({}, data), { status: 'OK' }),
        status: status,
        headers: {},
        statusText: 'ok',
    });
};
var createMockErrorResponse = function (data) { return (__assign(__assign({}, mockAxiosError), { data: data,
    toJSON: function () {
        return this.data;
    } })); };

export default PutioAPIClient;
export { FileSortOptions, MockPutioAPIClient, PutioAPIClientEventTypes, createMockErrorResponse, createMockResponse, isPutioAPIError, mockAxiosError, mockPutioAPIClientError, mockPutioAPIClientResponse };
