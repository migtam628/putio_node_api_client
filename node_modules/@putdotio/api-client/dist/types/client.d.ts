import { AxiosInstance, AxiosRequestConfig } from 'axios';
import { Emitter, EventListener } from 'event-emitter';
import Auth from './resources/Auth';
import Config from './resources/Config';
import Events from './resources/Events/Events';
import Family from './resources/Family';
import File from './resources/Files/File';
import Files from './resources/Files/Files';
import FriendInvites from './resources/FriendInvites/FriendInvites';
import Friends from './resources/Friends/Friends';
import IFTTT from './resources/IFTTT';
import OAuth from './resources/OAuth';
import Payment from './resources/Payment/Payment';
import RSS from './resources/RSS';
import Transfers from './resources/Transfers';
import Trash from './resources/Trash';
import Tunnel from './resources/Tunnel';
import User from './resources/User/User';
import Zips from './resources/Zips';
import { IPutioAPIClientOptions, IPutioAPIClientResponse, PutioAPIClientEventTypes } from './types';
declare class PutioAPIClient implements Emitter {
    static EVENTS: typeof PutioAPIClientEventTypes;
    static DEFAULT_OPTIONS: IPutioAPIClientOptions;
    options: IPutioAPIClientOptions;
    token: string;
    emit: (event: PutioAPIClientEventTypes, ...args: any[]) => void;
    once: (event: PutioAPIClientEventTypes, listener: EventListener) => void;
    on: (event: PutioAPIClientEventTypes, listener: EventListener) => void;
    off: (event: PutioAPIClientEventTypes, listener: EventListener) => void;
    http: AxiosInstance;
    Account: Account;
    Auth: Auth;
    Config: Config;
    Events: Events;
    Family: Family;
    Files: Files;
    File: File;
    Friends: Friends;
    FriendInvites: FriendInvites;
    IFTTT: IFTTT;
    OAuth: OAuth;
    Payment: Payment;
    RSS: RSS;
    Transfers: Transfers;
    Trash: Trash;
    Tunnel: Tunnel;
    User: User;
    Zips: Zips;
    constructor(options: IPutioAPIClientOptions);
    setToken(token: string): PutioAPIClient;
    get<T = any>(url: string, config?: AxiosRequestConfig): Promise<IPutioAPIClientResponse<T>>;
    post<T = any>(url: string, config?: AxiosRequestConfig): Promise<IPutioAPIClientResponse<T>>;
    put<T = any>(url: string, config?: AxiosRequestConfig): Promise<IPutioAPIClientResponse<T>>;
    delete<T = any>(url: string, config?: AxiosRequestConfig): Promise<IPutioAPIClientResponse<T>>;
    private createHTTPClient;
}
export default PutioAPIClient;
